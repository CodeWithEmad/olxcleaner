# -*- coding: utf-8 -*-
"""
parser.py

Contains routines to parse a course for errors after loading
"""
from errors.errors import MissingURLName, DuplicateURLName, MissingDisplayName

def traverse(edxobj):
    """
    Returns a generator that traverses a given object and all its children recursively

    This is the workhorse that allows routines to traverse an entire course:
    for obj in traverse(course):
        (do something with every obj in the course)

    :param edxobj: EdxObject to traverse
    :return: Generator of EdxObjects
    """
    # Generate this object
    yield edxobj

    # Generate every object generated by the children of this object
    for child in edxobj.children:
        for entry in traverse(child):
            yield entry

def find_url_names(course, errorstore):
    """
    Constructs a dictionary of (url_name: EdxObject) references

    :param course: EdxCourse object with a loaded course
    :param errorstore: ErrorStore object where errors are reported
    :return: Dictionary of {'[url_name]': EdxObject} links
    """
    results = {}

    # Traverse the tree
    for edxobj in traverse(course):
        url_name = edxobj.attributes.get('url_name')

        if url_name is None:
            if edxobj.needs_url_name and not edxobj.broken:
                # Report the error
                msg = f"A <{edxobj.type}> tag has no url_name"
                errorstore.add_error(MissingURLName(edxobj.filenames[0], msg))
        else:
            # Record the name
            if url_name in results:
                # We have a collision!
                msg = (f"Duplicate url_name found: {url_name} appears as <{results[url_name].type}> in "
                       f"{results[url_name].filenames[0]} and also as <{edxobj.type}> in {edxobj.filenames[0]}")
                errorstore.add_error(DuplicateURLName(edxobj.filenames[0], msg))
            else:
                results[url_name] = edxobj

    # Return the dictionary
    return results

def find_display_names(course, errorstore):
    """
    Searches the course for missing display_name attributes

    :param course: EdxCourse object with a loaded course
    :param errorstore: ErrorStore object where errors are reported
    :return: None
    """
    for edxobj in traverse(course):
        display_name = edxobj.attributes.get('display_name')
        if edxobj.display_name and (display_name is None or display_name == ""):
            if not edxobj.broken:
                if 'url_name' in edxobj.attributes:
                    msg = f"The tag {edxobj} is missing the display_name attribute"
                else:
                    msg = f"A <{edxobj.type}> tag with no url_name is missing the display_name attribute"
                errorstore.add_error(MissingDisplayName(edxobj.filenames[-1], msg))
